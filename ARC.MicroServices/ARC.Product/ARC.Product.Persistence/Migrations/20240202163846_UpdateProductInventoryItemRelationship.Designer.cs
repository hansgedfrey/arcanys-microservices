// <auto-generated />
using System;
using ARC.Product.Persistence.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ARC.Product.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240202163846_UpdateProductInventoryItemRelationship")]
    partial class UpdateProductInventoryItemRelationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ARC.Product.Persistence.Entities.Cart", b =>
                {
                    b.Property<Guid>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Entities.CartItem", b =>
                {
                    b.Property<Guid>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CartItemState")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId", "CartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Entities.InventoryItem", b =>
                {
                    b.Property<Guid>("InventoryItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("InventoryItemId");

                    b.HasIndex("ProductId");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Entities.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId", "SKU")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("CartId1");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Events.AbstractEvent", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Occurred")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId");

                    b.ToTable("Events");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AbstractEvent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ARC.Product.Persistence.Events.Cart.AbstractCartEvent", b =>
                {
                    b.HasBaseType("ARC.Product.Persistence.Events.AbstractEvent");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CartId");

                    b.HasDiscriminator().HasValue("AbstractCartEvent");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Events.CartItem.AbstractCartItemEvent", b =>
                {
                    b.HasBaseType("ARC.Product.Persistence.Events.AbstractEvent");

                    b.Property<Guid?>("CartItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CartItemId");

                    b.ToTable("Events", t =>
                        {
                            t.Property("CartItemId")
                                .HasColumnName("AbstractCartItemEvent_CartItemId");
                        });

                    b.HasDiscriminator().HasValue("AbstractCartItemEvent");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Events.InventoryItem.AbstractInventoryItemEvent", b =>
                {
                    b.HasBaseType("ARC.Product.Persistence.Events.AbstractEvent");

                    b.Property<Guid?>("InventoryItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("InventoryItemId");

                    b.HasDiscriminator().HasValue("AbstractInventoryItemEvent");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Events.Product.AbstractProductEvent", b =>
                {
                    b.HasBaseType("ARC.Product.Persistence.Events.AbstractEvent");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ProductId");

                    b.HasDiscriminator().HasValue("AbstractProductEvent");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Events.Cart.AddItemToCartEvent", b =>
                {
                    b.HasBaseType("ARC.Product.Persistence.Events.Cart.AbstractCartEvent");

                    b.Property<Guid>("CartItemId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CartItemId");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.HasIndex("CartItemId");

                    b.HasDiscriminator().HasValue("AddItemToCartEvent");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Events.Cart.CheckoutCartEvent", b =>
                {
                    b.HasBaseType("ARC.Product.Persistence.Events.Cart.AbstractCartEvent");

                    b.HasDiscriminator().HasValue("CheckoutCartEvent");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Events.Cart.CreateCartEvent", b =>
                {
                    b.HasBaseType("ARC.Product.Persistence.Events.Cart.AbstractCartEvent");

                    b.HasDiscriminator().HasValue("CreateCartEvent");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Events.Cart.RemoveItemFromCartEvent", b =>
                {
                    b.HasBaseType("ARC.Product.Persistence.Events.Cart.AbstractCartEvent");

                    b.Property<Guid>("CartItemId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CartItemId");

                    b.HasIndex("CartItemId");

                    b.HasDiscriminator().HasValue("RemoveItemFromCartEvent");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Events.Cart.UpdateCartItemQuantityEvent", b =>
                {
                    b.HasBaseType("ARC.Product.Persistence.Events.Cart.AbstractCartEvent");

                    b.Property<Guid>("CartItemId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CartItemId");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.HasIndex("CartItemId");

                    b.HasDiscriminator().HasValue("UpdateCartItemQuantityEvent");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Events.CartItem.AddedToCartEvent", b =>
                {
                    b.HasBaseType("ARC.Product.Persistence.Events.CartItem.AbstractCartItemEvent");

                    b.ToTable("Events", t =>
                        {
                            t.Property("CartItemId")
                                .HasColumnName("AbstractCartItemEvent_CartItemId");
                        });

                    b.HasDiscriminator().HasValue("AddedToCartEvent");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Events.InventoryItem.AddInventoryItemEvent", b =>
                {
                    b.HasBaseType("ARC.Product.Persistence.Events.InventoryItem.AbstractInventoryItemEvent");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.HasDiscriminator().HasValue("AddInventoryItemEvent");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Events.InventoryItem.UpdateInventoryItemEvent", b =>
                {
                    b.HasBaseType("ARC.Product.Persistence.Events.InventoryItem.AbstractInventoryItemEvent");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.HasDiscriminator().HasValue("UpdateInventoryItemEvent");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Events.Product.AddProductEvent", b =>
                {
                    b.HasBaseType("ARC.Product.Persistence.Events.Product.AbstractProductEvent");

                    b.HasDiscriminator().HasValue("AddProductEvent");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Events.Product.UpdateProductEvent", b =>
                {
                    b.HasBaseType("ARC.Product.Persistence.Events.Product.AbstractProductEvent");

                    b.HasDiscriminator().HasValue("UpdateProductEvent");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Events.Product.UpdateProductPriceEvent", b =>
                {
                    b.HasBaseType("ARC.Product.Persistence.Events.Product.AbstractProductEvent");

                    b.Property<decimal>("UpdatedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("UpdateProductPriceEvent");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Entities.CartItem", b =>
                {
                    b.HasOne("ARC.Product.Persistence.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ARC.Product.Persistence.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Entities.InventoryItem", b =>
                {
                    b.HasOne("ARC.Product.Persistence.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Entities.Product", b =>
                {
                    b.HasOne("ARC.Product.Persistence.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Entities.User", b =>
                {
                    b.HasOne("ARC.Product.Persistence.Entities.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Events.Cart.AbstractCartEvent", b =>
                {
                    b.HasOne("ARC.Product.Persistence.Entities.Cart", null)
                        .WithMany("Events")
                        .HasForeignKey("CartId");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Events.CartItem.AbstractCartItemEvent", b =>
                {
                    b.HasOne("ARC.Product.Persistence.Entities.CartItem", null)
                        .WithMany("Events")
                        .HasForeignKey("CartItemId");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Events.InventoryItem.AbstractInventoryItemEvent", b =>
                {
                    b.HasOne("ARC.Product.Persistence.Entities.InventoryItem", null)
                        .WithMany("Events")
                        .HasForeignKey("InventoryItemId");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Events.Product.AbstractProductEvent", b =>
                {
                    b.HasOne("ARC.Product.Persistence.Entities.Product", null)
                        .WithMany("Events")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Events.Cart.AddItemToCartEvent", b =>
                {
                    b.HasOne("ARC.Product.Persistence.Entities.CartItem", "CartItem")
                        .WithMany()
                        .HasForeignKey("CartItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartItem");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Events.Cart.RemoveItemFromCartEvent", b =>
                {
                    b.HasOne("ARC.Product.Persistence.Entities.CartItem", "CartItem")
                        .WithMany()
                        .HasForeignKey("CartItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartItem");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Events.Cart.UpdateCartItemQuantityEvent", b =>
                {
                    b.HasOne("ARC.Product.Persistence.Entities.CartItem", "CartItem")
                        .WithMany()
                        .HasForeignKey("CartItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartItem");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Entities.CartItem", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Entities.InventoryItem", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("ARC.Product.Persistence.Entities.Product", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
